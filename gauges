
gauges_per_second_sockets = io.of('/bstats_gauges_per_second').on('connection', (socket) ->
    console.log("gauges per second client connected")
    init_per_second_gauge_objects(socket, 300)
)

init_per_second_gauge_objects = (socket, data_points) ->
    now = timestamp() - seconds_offset
    timestamps = [(now - data_points)...now]
    send_gauge_objects_for_timestamp(sockets, timestamps, 'bstats_gauges_per_second')

# --------------- GAUGES ---------------------

send_gauge_objects_for_timestamp = (sockets, timestamps, channel) ->
    if config.gauges == 'all'
        get_all_gauges((gauges) ->
            send_gauge_objects(sockets, timestamps, channel, gauges)
        )
    else
        send_gauge_objects(sockets, timestamps, channel, config.gauges)

get_all_gauges = (callback) ->
    redis.smembers("bstats:gauges", (err, gauges) ->
        gauges = gauges ?= []
        callback(gauges)
    )

send_gauge_objects = (sockets, timestamps, channel, gauges) ->
    timestamps_and_gauges = timestamps.map((t) ->
        {
            timestamp : t,
            timestep  : if channel == "bstats_gauges_per_second" then "per_second" else "per_minute",
            gauges    : gauges
        })
    async.map(timestamps_and_gauges, get_gauge_objects, (err, results) ->
        flattened_results = flatten_array(results)
        send_data(sockets, channel, flattened_results) unless flattened_results.length == 0
    )

get_gauge_objects = (params, final_callback) ->
    async.map(params.gauges, (gauge, map_callback) ->
        async.series([
            (callback) ->
                key = "bstats:gauge:#{params.timestep}:#{gauge}:sum:#{params.timestamp}"
                redis.get(key, (err, res) ->
                    sum = parseInt(res)/1000
                    callback(null, sum)
                )
            ,
            (callback) ->
                key = "bstats:gauge:#{params.timestep}:#{gauge}:count:#{params.timestamp}"
                redis.get(key, (err, res) ->
                    count = parseInt(res)
                    callback(null, count)
                )
            ,
            (callback) ->
                key = "bstats:gauge:#{params.timestep}:#{gauge}:max:#{params.timestamp}"
                redis.zrange(key, 0, 0, (err, res) ->
                    max =  parseInt(res)/1000
                    callback(null, max)
                )
            ,
            (callback) ->
                key = "bstats:gauge:#{params.timestep}:#{gauge}:min:#{params.timestamp}"
                redis.zrange(key, 0, 0, (err, res) ->
                    min = parseInt(res)/1000
                    callback(null, min)
                )
        ], (err, results) ->
            avg = results[0]/results[1]
            object = {
                gauge     : gauge,
                timestamp : params.timestamp,
                max       : results[2] || 0,
                min       : results[3] || 0,
                avg       : avg || 0
            }
            map_callback(null, object)
        )
    , (err, results) ->
        final_callback(null, results)
    )
